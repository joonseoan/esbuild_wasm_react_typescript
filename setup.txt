1. npm
npm install --save-exact esbuild-wasm@0.8.27

2. esbuild setup
/**
  * [esbuild setup]
  1. visit  : https://esbuild.github.io/api/#transform-api 
      by the way, esbuild is on the basis of Go language.
      js code will be translated into Go lang by Web Assembly (esbuild-wasm).

  2. expand node_modules and find "esbuild-wasm" dependency
      find "esbuild-wasm" which is purple color
      it is including the library.
    
  3. import esbuild-wasm at the top of this file.
  */

3. upkg

import * as esbuild from 'esbuild-wasm';
 
export const unpkgPathPlugin = () => {
  return {
    name: 'unpkg-path-plugin',
    setup(build: esbuild.PluginBuild) {
      build.onResolve({ filter: /.*/ }, async (args: any) => {
        console.log('onResole', args);
        return { path: args.path, namespace: 'a' };
      });
 
      build.onLoad({ filter: /.*/ }, async (args: any) => {
        console.log('onLoad', args);
 
        if (args.path === 'index.js') {
          return {
            loader: 'jsx',
            contents: `
              import message from './message';
              console.log(message);
            `,
          };
        } else {
          return {
            loader: 'jsx',
            contents: 'export default "hi there!"',
          };
        }
      });
    },
  };
};
Fullscreen

4. localforage
   1) npm install localforage
   2) web site: https://www.npmjs.com/package/localforage
   3) localForage is a JavaScript library that improves the offline experience of your web app
      by using an asynchronous data store with a simple, localStorage-like API. 
      It allows developers to store many types of data instead of just strings.
      localForage includes a localStorage-backed fallback store 
      for browsers with no IndexedDB or WebSQL support. 
      Asynchronous storage is available in the current versions of all major browsers: Chrome, Firefox, Internet Explorer, and Safari (including Safari Mobile).

      It is using IndexedDB in browser
   4) 

5. iframe.
  1. create an another html file in public "test.html"
  2. index.tsx, <iframe src="test/html" />

6. moaco editor
  1) npm install --save-exact @monaco-editor/react@3.7.5
  2) document : npm websie and type @monaco-editor/react in search bar or https://www.npmjs.com/package/@monaco-editor/react/v/3.7.5
  3) we will going to use Editor in Props. (Find Props section and Editor.)
  4)  npm install --save-exact monaco-editor // it is for reaching out Monaco Editor type defninition. It is required to be installed separately

7. prettier into editor
npm install prettier @types/prettier

8. CSS library
$ npm install bulmaswatch

9. Monaco-jsx-highlighter
  // monaco-jsx-highlighter is not able to find jsx code. It is just highlighter
  // jscodeshift is a finder for jsx code
  npm install --save-exact monaco-jsx-highlighter@0.0.15 jscodeshift@0.11.0 @types/jscodeshift@0.7.2

10. React-resiszble
npm install --save-exact react-resizable@1.11.0 @types/react-resizable@1.7.2


11. markdown editor
  1) find @uiw/react-md-editor in npm site

12. Redux (particularly reducer) Helper, Immer
 1) npm install immer


--------------- What I learned
1. iframe
2. resizable
3. debouncing for performance
4. pseudo before and after
5. transpile
6. bundle
7. unset !inportant
8. bubbling, capturing, and event delegation by usint event.target and contains(node)


100. typescript
 1) {} compatible with { [key: string]: value: string }
