1. npm
npm install --save-exact esbuild-wasm@0.8.27

2. esbuild setup
/**
  * [esbuild setup]
  1. visit  : https://esbuild.github.io/api/#transform-api 
      by the way, esbuild is on the basis of Go language.
      js code will be translated into Go lang by Web Assembly (esbuild-wasm).

  2. expand node_modules and find "esbuild-wasm" dependency
      find "esbuild-wasm" which is purple color
      it is including the library.
    
  3. import esbuild-wasm at the top of this file.
  */

3. upkg

import * as esbuild from 'esbuild-wasm';
 
export const unpkgPathPlugin = () => {
  return {
    name: 'unpkg-path-plugin',
    setup(build: esbuild.PluginBuild) {
      build.onResolve({ filter: /.*/ }, async (args: any) => {
        console.log('onResole', args);
        return { path: args.path, namespace: 'a' };
      });
 
      build.onLoad({ filter: /.*/ }, async (args: any) => {
        console.log('onLoad', args);
 
        if (args.path === 'index.js') {
          return {
            loader: 'jsx',
            contents: `
              import message from './message';
              console.log(message);
            `,
          };
        } else {
          return {
            loader: 'jsx',
            contents: 'export default "hi there!"',
          };
        }
      });
    },
  };
};
Fullscreen

4. localforage
   1) npm install localforage
   2) web site: https://www.npmjs.com/package/localforage
   3) localForage is a JavaScript library that improves the offline experience of your web app
      by using an asynchronous data store with a simple, localStorage-like API. 
      It allows developers to store many types of data instead of just strings.
      localForage includes a localStorage-backed fallback store 
      for browsers with no IndexedDB or WebSQL support. 
      Asynchronous storage is available in the current versions of all major browsers: Chrome, Firefox, Internet Explorer, and Safari (including Safari Mobile).

      It is using IndexedDB in browser
   4) 

5. iframe.
  1. create an another html file in public "test.html"
  2. index.tsx, <iframe src="test/html" />

6. moaco editor
  1) npm install --save-exact @monaco-editor/react@3.7.5
  2) document : npm websie and type @monaco-editor/react in search bar or https://www.npmjs.com/package/@monaco-editor/react/v/3.7.5
  3) we will going to use Editor in Props. (Find Props section and Editor.)
  4)  npm install --save-exact monaco-editor // it is for reaching out Monaco Editor type defninition. It is required to be installed separately

7. prettier into editor
npm install prettier @types/prettier

8. CSS library
$ npm install bulmaswatch

9. Monaco-jsx-highlighter
  // monaco-jsx-highlighter is not able to find jsx code. It is just highlighter
  // jscodeshift is a finder for jsx code
  npm install --save-exact monaco-jsx-highlighter@0.0.15 jscodeshift@0.11.0 @types/jscodeshift@0.7.2

10. React-resiszble
npm install --save-exact react-resizable@1.11.0 @types/react-resizable@1.7.2


11. markdown editor
  1) find @uiw/react-md-editor in npm site

12. Redux (particularly reducer) Helper, Immer
 1) npm install immer

13. Install fontAwesome
 1) npm install @fortawesome/fontawesome-free



14. install lerna (lerna is for managing multiple (project) with different package.json)
 1) npm install -g --save-exact lerna@3.22.1
 2) cd .. from "editor-local-client" and under the most parent directory "esbuild_4", 
    make another folder e-code-book. (editor-local-client and e-code-book are in same folder, "esbuild" )
 3) get into "e-code-book" and run "lerna init" in terminal.
 4) move "editor-local-client" folder into "package" folder in "e-code-book"
 5) cd packages from e-code-book
 6) in packages folder, mkdir cli local-api
 6) get into each cli and local-api directory and npm init -y

  please, note that in lerna, we need to use lerna add instead of npm install.
  please refer "github.com/lerna/lerna"

 7) install package into each project in package folder.
  * it does not matter where the terminal directory is because of scope.

  // lerna add: same as npm install
  // commander: package name (lib name like express)
  // scope: position where the commander package is installed in package folder.
  lerna add commander --scope=cli

8) in local-api, create index.js file
  module.exports = () => {
    console.log('server started.');
  };

// "local-api" package (project) is installed in cli package (project)
9) lerna add local-api --scope=cli
   ==> then in package.json in cli project, it will be created. 
   local-api: "1.0.0" : because local-api package has version 1.0.0
   
   "dependencies": {
    "commander": "^7.1.0",
    "local-api": "^1.0.0" 
  }

  also, in node_modules folder of cli, we can see local-api package.

10) create index.js in cli project (package)
const serve = require('local-api');
serve();

11) in cli package terminal, node index.js

15. install typescript in local-api
  when exporting the package, it must be javascript, not typescript.

  1) lerna add typescript --dev --scope=local-api
  2) go to local-api folder
  3) npx typescript --init (if we do not have typescript globally), "tsc --init" is fine (if we have typescript globally)
  4) delete index.js file and create src folder and index.ts file
  5) in tsconfig.json file, uncomment
      "outDir": "./dist", 
      "declaration": true,
  6) in package.json, add this.
      --preserveWatchOutput ---> "index.d.ts" which is created will not create a console.
      "start": "tsc -w --preserveWatchOutput",
  7) in package.json, change "main" property's value to the changed path
      "main": "dist/index.js",
      // when it exports the package to another project, it notifies that there is typescript stuff with type definition file.
      "types": "dist/index.d.ts", 


16. install typescript in cli
  1) go to cli folder and "tsc --init"
  2) create src folder, and create index.ts file.
    import serve from 'local-api';
    serve();
  3) lerna add typescript --dev --scope=cli
      // we do not need to use "declaration": true, here because we do not export to the another package.
      "outDir": "./dist", 

  4) in package.json, 
      delete "main": "index.js" ===> it is not required because we do not export to the another package.
      "start": "tsc -w --preserveWatchOutput"
  5) npm run start

17. run multiple packages simultaneously

  1) go to the most parent directory, "e-code-book" which has lerna lib in package.json
  2) in package.json,
   // lerna will run every single project which has "start" property in package.json.
   // for instance, "start": "tsc -w" or "start": "react-scripts start",
   "scripts": {
    "start": "lerna run start --parallel"
  }






    

 



--------------- What I learned
1. iframe
2. resizable
3. debouncing for performance
4. pseudo before and after
5. transpile
6. bundle
7. unset !inportant
8. bubbling, capturing, and event delegation by using event.target and contains(node)
8-1. addEventListener('click'), the way to generate event from other elements
9. store.getState and store.dispatch for mock testing of redux/reducer
10. css ease-in
11. pseudo active
12: { [key: string]: {}} ===> empty object
13. useEffect [] management
14. useMemo concept and usage
15. animation
16. background should have same color to block flickering issue.
17. by using array.join('\n'), it is same as toString() for all element. so it can be added into useEffect(() => {}, [])


100. typescript
 1) {} compatible with { [key: string]: value: string }
